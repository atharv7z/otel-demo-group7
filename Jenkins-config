pipeline {
  agent any

  environment {
    AWS_DEFAULT_REGION = 'us-east-1'
    KUBECONFIG = '/var/lib/jenkins/.kube/config'
    IMAGE_TAG = "v${BUILD_NUMBER}"
    IMAGE_NAME = "atharvpt/otel-demo"
  }

  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          sh '''
            docker build -t $IMAGE_NAME:$IMAGE_TAG .
          '''
        }
      }
    }

    stage('Login to DockerHub') {
      steps {
        script {
          sh '''
            DOCKER_USER=$(aws ssm get-parameter --name "/ci/dockerhub/username" --query "Parameter.Value" --output text)
            DOCKER_PASS=$(aws ssm get-parameter --name "/ci/dockerhub/token" --with-decryption --query "Parameter.Value" --output text)

            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          '''
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh '''
              echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
              docker push $IMAGE_NAME:$IMAGE_TAG
            '''
          }
        }
      }
    }

    stage('Install OpenTelemetry via Helm') {
      steps {
        script {
          sh '''
            helm repo add opentelemetry-demo https://open-telemetry.github.io/opentelemetry-helm-charts || true
            for i in {1..3}; do helm repo update && break || sleep 10; done

            helm repo update

            helm upgrade --install otel-demo open-telemetry/opentelemetry-demo \
              --namespace otel-helm \
              --create-namespace \
              -f chart/values.yaml \
              --set image.repository=$IMAGE_NAME \
              --set image.tag=$IMAGE_TAG \
              --wait
          '''
        }
      }
    }

    

    stage('Validate Deployment') {
      steps {
        script {
          sh '''
            kubectl rollout status deployment/otel-demo -n otel-helm
          '''
        }
      }
    }
  }

  post {
    failure {
      script {
        echo "Deployment failed â€” attempting rollback..."
        sh '''
          REVISION=$(helm history otel-demo -n otel-helm | awk 'NR==3{print $1}')
          helm rollback otel-demo $REVISION -n otel-helm || true
        '''
      }
    }
    success {
      echo "Deployment and monitoring setup completed successfully!"
    }
  }
}
